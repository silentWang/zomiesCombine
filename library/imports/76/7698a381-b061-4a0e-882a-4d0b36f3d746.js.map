{"version":3,"sources":["assets/script/event/GameEvent.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,kDAA6C;AAE7C;IAAuC,6BAAS;IAAhD;QAAA,qEAyCC;QAvCG,eAAS,GAAG,EAAE,CAAC;QAEf,UAAI,GAAQ,IAAI,CAAC;QACjB,UAAI,GAAQ,IAAI,CAAC;QACjB,cAAQ,GAAa,IAAI,CAAC;;IAmC9B,CAAC;IAlCG,4BAAQ,GAAR,UAAS,IAAI,EAAE,IAAI,EAAE,EAAE;QACnB,IAAI,KAAK,GAAG,EAAE,CAAC;QACf,KAAK,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;QACrB,KAAK,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;QACrB,KAAK,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;QAEvB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;YACtC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;SAC7B;QAED,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAAA,CAAC;IAGF,4BAAQ,GAAR,UAAS,IAAI;QAAE,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,6BAAO;;QAClB,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAClC,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7B,KAAK,IAAI,CAAC,IAAI,MAAM,EAAE;gBAClB,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;gBACtB,KAAK,CAAC,QAAQ,IAAI,CAAC,KAAK,CAAC,QAAQ,OAAd,KAAK,EAAa,IAAI,EAAE,CAAC;aAC/C;SACJ;IACL,CAAC;IAAA,CAAC;IAEF,8BAAU,GAAV,UAAW,IAAI,EAAE,IAAI;QACjB,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAClC,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7B,MAAM,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,KAAK;gBACxB,IAAI,KAAK,CAAC,IAAI,KAAK,IAAI,IAAI,KAAK,CAAC,IAAI,KAAK,IAAI,EAAE;oBAC5C,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;iBAC3B;YACL,CAAC,CAAC,CAAC;SACN;QAAA,CAAC;IACN,CAAC;IAAA,CAAC;IACN,gBAAC;AAAD,CAzCA,AAyCC,CAzCsC,mBAAS,GAyC/C;;AAAA,CAAC","file":"","sourceRoot":"/","sourcesContent":["import Singleton from \"../manager/Singleton\";\n\nexport default class GameEvent extends Singleton {\n\n    eventHash = {};\n\n    ower: any = null;\n    type: any = null;\n    callback: Function = null;\n    register(ower, type, cb) {\n        var event = {};\n        event[\"ower\"] = ower;\n        event[\"type\"] = type;\n        event[\"callback\"] = cb;\n\n        if (!this.eventHash.hasOwnProperty(type)) {\n            this.eventHash[type] = [];\n        }\n\n        this.eventHash[type].push(event);\n    };\n\n    \n    dispatch(type, ...data) {\n        var events = this.eventHash[type];\n        if (events && events.length > 0) {\n            for (var i in events) {\n                var event = events[i];\n                event.callback && (event.callback(...data));\n            }\n        }\n    };\n\n    unregister(ower, type) {\n        var events = this.eventHash[type];\n        if (events && events.length > 0) {\n            events.forEach((event, index) => {\n                if (event.ower === ower && event.type === type) {\n                    events.splice(index, 1);\n                }\n            });\n        };\n    };\n};"]}