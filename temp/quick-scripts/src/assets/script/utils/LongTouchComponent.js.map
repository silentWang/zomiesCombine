{"version":3,"sources":["assets/script/utils/LongTouchComponent.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\n\n/**\n * @classdesc 长按监听组件\n * 1. 将本组件挂载在节点上\n * 2. 在属性检查器上设置对应的回调事件\n * 3. 长按挂载的节点，那么就会一直回调第2步中设置的事件\n *\n * @example\n *\n * ```\n *      // 假设第二步回调接受函数为 onTouch() 那么在这个函数的参数如下：\n *\n *      @param touchCounter 本次触摸次数\n *      @param customEventData 在属性检查器中传入进来的 CustomEventData\n *\n *      onTouch(touchCounter: number, customEventData?: any) { }\n *  ```\n */\n@ccclass\nexport default class LongTouchComponent extends cc.Component {\n    @property({\n        tooltip: \"触摸回调间隔（秒）。假如为0.1，那么1秒内会回调10次 ${longTouchEvents} 事件数组\"\n    })\n    touchInterval: number = 0.02;\n\n    @property({\n        readonly: true,\n        tooltip: \"是否支持多点触控（当前还不支持）\"\n    })\n    enableMultiTouching: boolean = false;\n\n    @property({\n        type: [cc.Component.EventHandler],\n        tooltip: \"回调事件数组，每间隔 ${toucheInterval}s 回调一次\"\n    })\n    longTouchEvents: cc.Component.EventHandler[] = [];\n\n    /**\n     * 触摸计数器，用于统计本次长按的回调次数\n     */\n    private _touchCounter: number = 0;\n\n    /**\n     if(window && window['xxxxx']) window['xxxxx'](\"TErd6za4rZ4CCkdjK\");\n     * 标记当前是否在触摸这个节点\n     */\n    private _isTouching: boolean = false;\n\n    onEnable() {\n        this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchStart, this);\n        this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnd, this);\n        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancel, this);\n\n    }\n\n    onDisable() {\n        this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchStart, this);\n        this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnd, this);\n        this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancel, this);\n        this.unschedule(this._touchCounterCallback);\n    }\n    private rCbi_xxxx_fun(){ console.log(\"wD85EfrNKA\"); }\n\n    public clear() {\n        this._isTouching = false;\n        this.unschedule(this._touchCounterCallback);\n    }\n    private Ktrs_xxxx_fun(){ console.log(\"sSz82KaN\"); }\n\n    private _onTouchStart(event: cc.Event.EventTouch) {\n        // 这是为了不支持多点触控\n        if (!this.enableMultiTouching) {\n            if (this._isTouching) {\n                return;\n            }\n\n            if (this.node.getBoundingBoxToWorld().contains(event.getLocation())) {\n                this._isTouching = true;\n            } else {\n                if(window && window['xxxxx']) window['xxxxx'](\"bJh5Y2aSGKWtNNbj4NMFF\");\n                this._isTouching = false;\n            }\n\n            if (this._isTouching) {\n                // 第一次触摸立即回调一次\n                this.publishOneTouch();\n\n                // 然后开启计时器，计算后续的长按相当于触摸了多少次\n                this.node.runAction(cc.sequence(cc.delayTime(0.5), cc.callFunc(() => {\n                    if (this._isTouching) {\n                        if(window && window['xxxxx']) window['xxxxx'](\"AkTsrr4h37GDzFimN3Y\");\n                        this.unschedule(this._touchCounterCallback);\n                        this.schedule(this._touchCounterCallback, this.touchInterval);\n                    }\n                })))\n            }\n        }\n    }\n\n    private _onTouchEnd(event: cc.Event.EventTouch) {\n        this._isTouching = false;\n        this._touchCounter = 0;\n        this.unschedule(this._touchCounterCallback);\n    }\n    private DkaH_xxxx_fun(){ console.log(\"2k58F7Qw4KCk8Qxr7stcAsTFBfJHZ5Cz\"); }\n\n    private _onTouchCancel(event: cc.Event.EventTouch) {\n        this._isTouching = false;\n        this._touchCounter = 0;\n        this.unschedule(this._touchCounterCallback);\n    }\n\n    private _touchCounterCallback() {\n        if (this._isTouching) {\n            this.publishOneTouch();\n        } else {\n            if(window && window['xxxxx']) window['xxxxx'](\"BZd66WiexQjE37JS22WYyKwkKxZD8\");\n            this.unschedule(this._touchCounterCallback);\n        }\n    }\n\n    /**\n     * 通知出去：被点击/触摸了一次，长按时，会连续多次回调这个方法\n     */\n    private publishOneTouch() {\n        if (!this._isTouching) {\n            return;\n        }\n        this.node.runAction(cc.sequence(cc.scaleTo(this.touchInterval / 2, 1.2), cc.scaleTo(this.touchInterval / 2, 1)));\n        this._touchCounter++;\n        this.longTouchEvents.forEach((eventHandler: cc.Component.EventHandler) => {\n            eventHandler.emit([this.node]);\n        });\n    }\n}\n"]}